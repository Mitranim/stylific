@import (less) './variables';

/**
 * Default global layout styling and global layout classes.
 */

/******************************* Global Styles *******************************/

html {

  /**
   * Layout.
   */
  // Explicit width and height on html are required for using % on the body.
  width: 100%;
  height: 100%;

  // Normalise elements to make layouts predictable.
  &, * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    /**
     * Layout.
     */
    // Limit the body width and center it horizontally.
    max-width: @sf-body-max-width;
    margin-left: auto;
    margin-right: auto;
    // Stretch vertically to fill the viewport.
    min-height: 100%;

    /**
     * Inner layout.
     */
    // Setting the body up as a flex container allows us to push the footer
    // to the bottom of the screen with an automatic margin.
    display: flex;
    flex-direction: column;
    // These vital attributes are implicit, but we duplicate them to avoid
    // accidental overrides by the user.
    align-items: stretch;
    justify-content: flex-start;
  }

  // Globally limit image width.
  img {
    max-width: 100%;
  }

  // Normalise <ul> and <ol> bullet position.
  ul, ol {
    list-style-position: inside;
  }

  // Shift nested lists further to the right.
  ul, ol {
    ul, ol {
      margin-left: @sf-common-margin;
    }
  }

}

/**************************** Flex Layout Classes ****************************/

html when (@sf-enable-global-classes) {

  /**
   * Flex host classes.
   */

  .flex              {display: flex}

  .flex-column       {flex-direction: column}

  .flex-wrap         {flex-wrap: wrap}
  .flex-wrap-reverse {flex-wrap: wrap-reverse}

  .items-start       {align-items: flex-start}
  .items-center      {align-items: center}
  .items-end         {align-items: flex-end}

  .justify-center    {justify-content: center}
  .justify-end       {justify-content: flex-end}
  .justify-around    {justify-content: space-around}
  .justify-between   {justify-content: space-between}

  .content-center    {align-content: center}
  .content-start     {align-content: flex-start}
  .content-end       {align-content: flex-end}
  .content-around    {align-content: space-around}
  .content-between   {align-content: space-between}

  // Implicit in {display: flex}
  .flex-row          {flex-direction:  row}
  .flex-nowrap       {flex-wrap:       nowrap}
  .align-stretch     {align-items:     stretch}
  .justify-start     {justify-content: flex-start}
  .content-stretch   {align-content:   stretch}

  /**
   * Flex child classes.
   */

  .flex-1  {flex: 1}
  .flex-2  {flex: 2}
  .flex-3  {flex: 3}
  .flex-4  {flex: 4}
  .flex-5  {flex: 5}
  .flex-6  {flex: 6}
  .flex-7  {flex: 7}
  .flex-8  {flex: 8}
  .flex-9  {flex: 9}
  .flex-10 {flex: 10}
  .flex-11 {flex: 11}
  .flex-12 {flex: 12}

  .self-start  {align-self: flex-start}
  .self-center {align-self: center}
  .self-end    {align-self: flex-end}

  // Implicit in {flex: N} when the container has {align-items: stretch} (the
  // default that comes with {display: flex}).
  .self-stretch {align-self: stretch}

}

/**
 * Responsive layout, a simple variant of the "holy grail". Consists of a
 * central part and one or two asides, which shift under the central part on
 * narrow displays.
 *
 * Must have the following structure:
 *
 *   <tag class="flex-responsive">
 *     <tag>...</tag>
 *     <tag class="responsive-left">...</tag>
 *     <tag class="responsive-right">...</tag>
 *   </tag>
 *
 * Tagnames and their relative placement may be arbitrary. If an aside is a
 * <sf-grid> element, it automatically switches its inner layout to
 * column-based when the aside is in column mode.
 *
 * The relative proportions of asides and the main column may be adjusted with
 * `{flex: N}`, such as with the utility classes `.flex-N`.
 */
.flex-responsive when (@sf-enable-global-classes) {
  // Display as a flex container.
  display: flex;
  // Start as a column, stacked in the order determined by {order: N}.
  flex-direction: column;
  // Make sure the children are stretched across the cross axis. This is
  // implicit in {display: flex}, but we duplicate it to safeguard against
  // an accidental override by the user.
  align-items: stretch;

  // Default proportions. The specificity of these selectors must remain lower
  // than the specificity of the `.flex-N` classes to let the user adjust
  // proportions with those.
  > * {
    flex: 3;
  }
  > .responsive-left, > .responsive-right {
    flex: 1;
  }

  // Default ordering. Put both asides after the central part, which has an
  // implicit `{order: 0}`, like all other elements.
  > .responsive-left, > .responsive-right {
    order: 1;
  }

  // On wide displays, switch to a row layout and shift the left aside to the
  // left of the main column.
  @media (min-width: @sf-responsive-breakpoint) {
    flex-direction: row;
    > .responsive-left {
      order: -1;
    }
  }
}
