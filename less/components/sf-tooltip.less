@import (reference) '../variables';
@import (reference) '../mixins';

/**
 *
 * # Usage
 *
 * A tooltip is invoked with an attribute, like so:
 *
 *   <p sf-tooltip="tooltip text">hover me</p>
 *
 *
 * ## Position
 *
 * By default, it's positioned above the host element. It can be moved to the
 * bottom with another attribute:
 *
 *   <p sf-tooltip="tooltip text" sf-position="bottom">hover me</p>
 *
 * The following positions are supported: top, top-right, bottom, bottom-right.
 *
 *
 * ## Trigger
 *
 * By default, the tooltip is triggered with :hover. You can specify other
 * triggers with another attribute:
 *
 *   <p sf-tooltip="tooltip text" contenteditable
 *      sf-trigger="hover focus">hover or focus me</p>
 *
 * The following triggers are supported: :active, :disabled, :focus, :hover,
 * :target. You can also include 'true' to make the tooltip visible at all
 * times.
 *
 *
 * # Limitations
 *
 * This implementation uses the ::after pseudoelement. This doesn't require any
 * additional markup for most elements, but doesn't work with
 * <input type="text"> and <textarea> since they can't have children. For the
 * :hover and :active versions, you can work around this by wrapping the input
 * into a parent element and applying the tooltip attributes to the parent.
 * These states naturally propagate from the input to the parent, and the
 * tooltip will be visible. However, this won't work for :focus, :disabled,
 * and, most likely, :target, since these states don't propagate to parents.
 *
 * Example of using a tooltip with an input:
 *
 *   <p sf-tooltip="tooltip text">
 *     <input>
 *   </p>
 *
 * It also sets {position: relative} on the host.
 */

/**
 * ToDo.
 *
 * Look for ways to implement tooltips that work with <input type="text"> and
 * <textarea> without involving parents (siblings and attributes only).
 */

@sf-tooltip-attr: ~'@{sf-prefix}-tooltip';
[@{sf-tooltip-attr}] {.sf-tooltip()}
.sf-tooltip() {

  /**
   * Layout.
   */
  position: relative;

  // Workaround for a bug in the clean-css minifier used for the documentation.
  // Adding :not([@{sf-tooltip-attr}='']) to the main selector (the one we apply
  // the component mixin to) causes the minifier to add an extra space before
  // attribute selectors for position and trigger. Moving it here as an extra
  // rule patches the problem.
  &[@{sf-tooltip-attr}='']::after {content: none}

  &::after {
    content: attr(@sf-tooltip-attr);

    /**
     * Layout.
     */
    position: absolute;
    z-index: @sf-z-index-tooltip;

    // Hidden unless the host is activated. Both opacity and visibility are
    // required for animating the transition.
    opacity: 0;
    visibility: hidden;
    // Animate the transitions.
    & when (@sf-enable-tooltip-transitions) {
      .sf-common-transitions-all();
    }

    // Use a fraction of the host's font size.
    font-size: percentage(@sf-tooltip-proportion);
    // Use a fraction of the standard padding. We scale it down twice as much as
    // other dimensions.
    padding: @sf-common-padding * @sf-tooltip-proportion / 2;

    // Use grayscale negatives of the base text and background colours. If the
    // user adjusts the defaults, the tooltips adjust to the new theme
    // automatically.
    background-color: darken(white, luma(@sf-base-background-color));
    color: darken(white, luma(@sf-base-text-color));

    // Use a fraction of the standard border radius.
    & when (@sf-enable-tooltip-border-radius) {
      border-radius: @sf-common-border-radius * @sf-tooltip-proportion;
    }
  }

  /**
   * Tooltip positioning.
   */
  // Position attribute name.
  @attr-position: ~'@{sf-prefix}-position';
  // Calculated offset.
  @offset: ~'calc(100% + @{sf-tooltip-offset})';
  // Top (default).
  &:not([@{attr-position}])::after,
  &[@{attr-position}=top]::after {
    bottom: @offset;
    left: 0;
  }
  // Top-right.
  &[@{attr-position}=top-right]::after {
    bottom: @offset;
    right: 0;
  }
  // Bottom.
  &[@{attr-position}=bottom]::after {
    top: @offset;
    left: 0;
  }
  // Bottom-right.
  &[@{attr-position}=bottom-right]::after {
    top: @offset;
    right: 0;
  }

  /**
   * Triggered state styles. In the absence of a trigger attribute, the
   * tooltip is triggered by hovering the host. Trigger indicators may be
   * combined like so:
   *
   *   <button sf-tooltip="tooltip text"
   *           sf-trigger="hover focus">hover or focus me</button>
   */
  @attr-trigger: ~'@{sf-prefix}-trigger';
  &:not([@{attr-trigger}]):hover,
  &[@{attr-trigger}*=active]:active,
  &[@{attr-trigger}*=disabled]:disabled,
  &[@{attr-trigger}*=focus]:focus,
  &[@{attr-trigger}*=hover]:hover,
  &[@{attr-trigger}*=target]:target,
  &[@{attr-trigger}*=true] {
    &::after {
      opacity: inherit;
      visibility: inherit;
    }
  }

}
