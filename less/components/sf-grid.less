/**
 * Basic grid system.
 *
 *   <sf-grid>
 *     ...
 *   </sf-grid>
 */

/**
 * ToDo.
 *
 * Document usage.
 */

@{sf-prefix}-grid {.sf-grid()}
.sf-grid() {

  /**
   * Inner layout.
   */
  display: flex;
  flex-wrap: wrap;

  /**
   * Immediate child attributes.
   */
  & > * {
    // Prevent children from unexpectedly stretching or shrinking.
    flex-grow: 0;
    flex-shrink: 0;

    // Wrap at a different number of items on different display sizes.
    .sf-xs({flex-basis: 100%});
    .sf-sm({flex-basis: 50%});
    .sf-md({flex-basis: 25%});
    .sf-lg({flex-basis: 25%});
  }

  /**
   * Inner layout and child attributes in a column state in a responsive
   * layout.
   *
   * A responsive layout (see the file `layout.less`) consists of a
   * .flex-responsive parent and a few children, some of which are asides with
   * the classes .responsive-left and .responsive-right. On a wide display,
   * they're moved to the sides and are treated as flexible columns. If a
   * <sf-grid> element is used as an aside, we must change its inner flex
   * direction to column and make its children inflexible to prevent them from
   * stretching vertically. This must happen at the same breakpoint as the
   * row/column switching in the responsive layout.
   */
  .flex-responsive > &.responsive-left,
  .flex-responsive > &.responsive-right {
    @media (min-width: @sf-responsive-breakpoint) {
      // Switch to a column direction.
      flex-direction: column;
      // Make children inflexible.
      & > * {flex: none}
    }
  }

}
