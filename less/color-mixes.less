/**
 * Default global colours, colour-related classes and mixins.
 */

/********************************** Styles ***********************************/

html {

  // Default background colour specifically for the html element.
  .sf-shift-color(background-color, @sf-base-background-color, 5%);

  // Use default static colours starting with the body element.
  body {
    color: @sf-base-text-color;
    background-color: @sf-base-background-color;
  }

  // Enable static colour classes on children.
  * {
    .sf-colormix-all-states(~'', false);
  }

  // Enable interactive colour behaviour on editable elements.
  input, textarea, [contenteditable] {
    background-color: @sf-base-background-color;
    .sf-colormix-all-states(~'', true);
  }

  // Utility classes to enable interactive colour behaviour on a given element
  // or its immediate children.
  .interactive {.sf-colormix-all-states(~'', true)}
  .interactive-children > * {.sf-colormix-all-states(~'', true)}

}

// Default anchor styling.
a {.sf-anchor-color()}

// Default image backgrop.
img {
  .sf-image-backdrop();
}

// White text colour shortcut.
.white when (@sf-enable-global-classes) {
  color: white;
}

/********************************** Mixins ***********************************/

/**
 * Base macro for a non-inverse colour combination. Takes a colour and a
 * percentage by which it should be adjusted, and outputs a ruleset that may
 * include {color} and/or {background-color}.
 *
 * If @color matches the default text colour, no {color} rule is output; the
 * text should inherit the color from its parent, and ultimately from <body>,
 * on which we define the default text colour rule (see the block at the
 * beginning of this file). If @color is not the default text colour, and no
 * percentage is given, it's adjusted to 25% or 75% luminance, whichever is
 * closest to the luminance of the default text colour. If a percentage is
 * given, @color is output as a background-color overlay with the opacity
 * matching the given percentage.
 *
 * By the new rules for the straight colour mix, the background colour is
 * always defined, and it's modified by the given percentage. If the given
 * colour matches the base text colour, the starting background colour is the
 * base background colour. If the given colour is different from the base text
 * colour, the starting background colour is derived from it, adjusting the
 * luminance to match the luminance of the default background colour. Then
 * it's shifted by the given percentage. If no percentage is given and a
 * non-default colour is used, it's shifted by the base percentage.
 */
.sf-colormix-base(@color, @perc) {
  // Determine the text colour.
  & when (@perc = 0%) and not (@color = @sf-base-text-color) {
    color: hsl(hue(@color), saturation(@color), 75% - luma(contrast(@sf-base-text-color)) / 2);
  }

  // If the given text is the default text colour and a percentage is given, use
  // the default background colour, shifted by the given percentage.
  & when (@color = @sf-base-text-color) and not (@perc = 0%) {
    // Adjust the background colour by the given percentage.
    .sf-shift-color(background-color, @sf-base-background-color, @perc);
  }
  // Otherwise derive it from the given colour, adjusting the luminance to match
  // the luminance of the default background colour.
  & when not (@color = @sf-base-text-color) {
    // Derive the colour, adjusting it to match the desired luminance.
    @bg: hsl(hue(@color), saturation(@color), luma(@sf-base-background-color));
    // Adjust the background colour by the given percentage, or by the base
    // percentage if none was given.
    & when (@perc = 0%) {
      .sf-shift-color(background-color, @bg, @sf-delta-base);
    }
    & when not (@perc = 0%) {
      .sf-shift-color(background-color, @bg, @perc);
    }
  }
}

/**
 * Base macro for an inverse colour combination. Takes a colour and a
 * percentage by which it should be adjusted, and outputs a ruleset that may
 * include {color} and/or {background-color}.
 *
 * This macro outputs a combination of {color} and {background-color}, where
 * luminance is inverse to the luminance of the default text and background
 * colours. If @color matches the default text colour and no percentage is
 * given, the output is an inverse combination of the default colours. If it
 * doesn't match the default and no percentage is given, both output rules use
 * the @color, but they're adjusted to have the luminance of 25% and 75%,
 * where the lighter/darker proportion is inverse to the defaults. If a
 * percentage is given, no {color} is output; the background colour is based
 * on @color, with the luminance adjusted to match the default background
 * colour (if @color matches the default text colour) or to be at 25% or 75%,
 * whichever is closer to the luminance of the default text colour.
 */
.sf-colormix-base-inverse(@color, @perc) {
  & when (@perc = 0%) {
    // Derive the text colour from the given colour, adjusting the luminance. If
    // the base text colour is given, use the luminance of the base background
    // colour. Otherwise adjust it to be 25% or 75%, whichever is closest to the
    // base text colour luminance.
    & when (@color = @sf-base-text-color) {
      color: hsl(hue(@color), saturation(@color), luma(@sf-base-background-color));
    }
    & when not (@color = @sf-base-text-color) {
      color: hsl(hue(@color), saturation(@color), 75% - luma(contrast(contrast(@sf-base-text-color))) / 2);
    }

    // Derive the background colour from the given colour, adjusting the
    // luminance. If the base text colour is given, simply use it as background.
    // If another colour is given, adjust its luminance to 75% or 25%, whichever
    // is more in contrast with the base text colour.
    & when (@color = @sf-base-text-color) {
      background-color: @color;
    }
    & when not (@color = @sf-base-text-color) {
      background-color: hsl(hue(@color), saturation(@color), 75% - luma(contrast(@sf-base-text-color)) / 2);
    }
  }

  & when not (@perc = 0%) {
    & when (@color = @sf-base-text-color) {
      .sf-shift-color(background-color, @sf-base-text-color, @perc);
    }
    & when not (@color = @sf-base-text-color) {
      @bg: hsl(hue(@color), saturation(@color), 75% - luma(contrast(@sf-base-text-color)) / 2);
      .sf-shift-color(background-color, @bg, @perc);
    }
  }
}

// Macro that takes a prefix, an affix, and a percentage by which to adjust each
// colour, and outputs rulesets for the given combination of selectors with each
// class name for straight and inverse versions of each colour. This macro is
// what the user redefines to add custom colour classes to default mixes.
.sf-colormix-all-classes(@prefix, @affix, @perc) {
  &@{prefix}@{affix} {.sf-colormix-base(@sf-base-text-color, @perc)}

  &.inverse@{prefix}@{affix} {.sf-colormix-base-inverse(@sf-base-text-color, @perc)}

  &.error@{prefix}@{affix}         {.sf-colormix-base(@sf-color-error, @perc)}
  &.error-inverse@{prefix}@{affix} {.sf-colormix-base-inverse(@sf-color-error, @perc)}

  &.info@{prefix}@{affix}         {.sf-colormix-base(@sf-color-info, @perc)}
  &.info-inverse@{prefix}@{affix} {.sf-colormix-base-inverse(@sf-color-info, @perc)}

  &.success@{prefix}@{affix}         {.sf-colormix-base(@sf-color-success, @perc)}
  &.success-inverse@{prefix}@{affix} {.sf-colormix-base-inverse(@sf-color-success, @perc)}

  &.warning@{prefix}@{affix}         {.sf-colormix-base(@sf-color-warning, @perc)}
  &.warning-inverse@{prefix}@{affix} {.sf-colormix-base-inverse(@sf-color-warning, @perc)}
}

// Macro that takes a prefix and groups all colour definitions for known states.
.sf-colormix-all-states(@prefix, @interactive) {
  .sf-colormix-all-classes(@prefix, ~'', 0%);
  .sf-colormix-all-classes(@prefix, ~'.active', @sf-delta-activated);
  & when (@interactive) {
    .sf-colormix-all-classes(@prefix, ~':hover:not(.active)', @sf-delta-hover);
    .sf-colormix-all-classes(@prefix, ~':focus:not(.active)', @sf-delta-focus);
    .sf-colormix-all-classes(@prefix, ~':active:not(.active)', @sf-delta-active);

    // Animate colour transitions.
    &@{prefix} {.sf-common-transitions-all()}
  }
}

// Lightens or darkens the given colour by the given percentage based on its
// luminance, and outputs as the given rule.
.sf-shift-color(@rule, @color, @perc) {
  & when (luma(@color) < 50%)  {@{rule}: lighten(@color, @perc)}
  & when (luma(@color) >= 50%) {@{rule}: darken(@color, @perc)}
}

// Anchor colour mixin.
.sf-anchor-color() {
  text-decoration: none;
  color: @sf-base-link-color;
  &:hover:not(.active), &:focus:not(.active) {
    .sf-shift-color(color, @sf-base-link-color, @sf-delta-activated);
  }
  // Animate any changes.
  .sf-common-transitions-all();
}

// Default backdrop for images and some other elements.
.sf-image-backdrop() {
  background-color: @sf-gray;
}
