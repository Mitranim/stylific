/*********************************** Media ***********************************/

/**
 * Media query wrappers. Take a ruleset and wrap it into a query that only
 * works between two adjacent display sizes. See `variables.less` for sizes.
 */

.sf-xs(...) {
  @media(max-width: @sf-screen-xs) {
    @arguments();
  }
}

.sf-sm(...) {
  @media(min-width: @sf-screen-xs) and (max-width: @sf-screen-sm) {
    @arguments();
  }
}

.sf-md(...) {
  @media(min-width: @sf-screen-sm) and (max-width: @sf-screen-md) {
    @arguments();
  }
}

.sf-lg(...) {
  @media(min-width: @sf-screen-md) {
    @arguments();
  }
}

/**
 * Scales the given rule by different percentages depending on display width.
 */
.sf-media-mix(@rule; @value) {
  .sf-xs({@{rule}: @value * 0.7});
  .sf-sm({@{rule}: @value * 0.8});
  .sf-md({@{rule}: @value * 0.9});
  .sf-lg({@{rule}: @value});
}

/**
 * Scales the given rule inversely by different percentages depending on
 * display width.
 */
.sf-media-mix-inverse(@rule; @value) {
  .sf-xs({@{rule}: @value});
  .sf-sm({@{rule}: @value * 0.9});
  .sf-md({@{rule}: @value * 0.8});
  .sf-lg({@{rule}: @value * 0.7});
}

/********************************** Layout ***********************************/

// Shortcut to defining an element as a flex layout host and centering its
// children both horizontally and vertically.
.sf-flex-host-center() {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

// Shortcut to a fixed-position overlay covering the whole screen.
.sf-fixed-overlay() {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// Shortcut to horizontally centering a fixed-position element with margins.
// Explicitly setting `left` and `right` to 0 enables automatic margins for a
// fixed-position element.
.sf-fixed-center-with-margins() {
  left: 0;
  right: 0;
  margin-left: auto;
  margin-right: auto;
}

/******************************** Typography *********************************/

// Applies the given rules to all headers.
.sf-h(@rules) {
  h1, h2, h3, h4, h5, h6 {
    @rules();
  }
}

/**************************** Shadows and Borders ****************************/

.sf-shadow-weak() {
  box-shadow: 0 0 0 1px fade(@sf-base-text-color, 10%);
}

.sf-shadow-weak-bottom() {
  box-shadow: 0 1px 0 0 fade(@sf-base-text-color, 10%);
}

.sf-shadow-thin() {
  box-shadow: 0 0 4px -1px fade(@sf-base-text-color, 50%);
}

.sf-shadow-medium() {
  box-shadow: 0 0.2rem 1.5rem -0.2rem fade(@sf-base-text-color, 50%);
}

.sf-shadow-thick() {
  box-shadow: 0 0.2rem 2rem -0.2rem fade(@sf-base-text-color, 50%);
}

.sf-border-weak() {
  border: 1px solid fade(@sf-base-text-color, 20%);
}

.sf-outline-weak() {
  outline: 1px solid fade(@sf-base-text-color, 20%);
}

/********************************** Images ***********************************/

// Typical group of rules for a cover background image.
.sf-background-cover() {
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
}

/******************************** Animations *********************************/

/**
 * Applies the given transition rule with the common transition settings, if
 * transitions are enabled. See `variables.less` for the conditions. This is
 * used internally for all transitions.
 */
.sf-common-transition(@rule) {
  & when (@sf-enable-common-transitions) {
    transition: @rule @sf-common-transition-duration @sf-common-transition-timing-function;
  }
}

/**
 * Version of .sf-common-transition() that takes several transition properties
 * and applies them all. Property names need to be passed as ~'a, b, c'.
 */
.sf-common-transitions(@properties) {
  & when (@sf-enable-common-transitions) {
    transition-property: @properties;
    transition-duration: @sf-common-transition-duration;
    transition-timing-function: @sf-common-transition-timing-function;
  }
}

// Applies all transitions with the common settings.
.sf-common-transitions-all() {
  .sf-common-transition(all);
}
