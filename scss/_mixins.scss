/*********************************** Media ***********************************/

@mixin sf-eq-sm {
  @media (max-width: $sf-layout-breakpoint-sm - 1) {
    @content;
  }
}

@mixin sf-gt-sm {
  @media (min-width: $sf-layout-breakpoint-sm) {
    @content;
  }
}

@mixin sf-eq-md {
  @media (min-width: $sf-layout-breakpoint-sm) and (max-width: $sf-layout-breakpoint-md - 1) {
    @content;
  }
}

@mixin sf-gt-md {
  @media (min-width: $sf-layout-breakpoint-md) {
    @content;
  }
}

@mixin sf-eq-lg {
  @media (min-width: $sf-layout-breakpoint-md) and (max-width: $sf-layout-breakpoint-lg - 1) {
    @content;
  }
}

@mixin sf-gt-lg {
  @media (min-width: $sf-layout-breakpoint-lg) {
    @content;
  }
}

/********************************** Colors ***********************************/

/**
 * See notes in colors.scss.
 */

@mixin sf-register-selected-state($postfix: '') {
  @warn 'The `sf-register-selected-state` mixin has been deprecated and may be removed in a future release.';

  &:not([disabled]) {
    &#{$postfix} {
      // Grayscale theme.
      background-color: rgba(map-get($sf-color-map-primary, default), 0.1);
    }

    // Colour themes.
    @each $color-map in $sf-color-maps {
      $name: map-get($color-map, name);
      $selected: map-get($color-map, selected);

      // Text theme.
      &#{$postfix}.theme-text-#{$name},
      .theme-text-#{$name} &#{$postfix},
      &.theme-text-#{$name}#{$postfix} {
        // These selectors are required to match the states and specificity of
        // the base interactive selectors.
        color: sf-sensible-text-color($selected);
        svg {fill: $selected}
      }

      // Full theme.
      &#{$postfix}.theme-#{$name},
      .theme-#{$name} &#{$postfix},
      &.theme-#{$name}#{$postfix} {
        // These selectors are required to match the states and specificity of
        // the base interactive selectors.
        background-color: $selected;
        color: sf-contrasting-color($selected);
        svg {fill: sf-contrasting-color($selected)}
      }
    }
  }
}

@mixin sf-register-interactive-selector($postfix: '') {
  &#{$postfix} {
    &:not([disabled]) {
      // Grayscale theme.
      &:hover, &:focus, &:active {
        background-color: rgba(map-get($sf-color-map-primary, default), 0.05);
      }
      &.active {
        background-color: rgba(map-get($sf-color-map-primary, default), 0.1);
      }
    }
  }

  // Colour themes.
  @each $color-map in $sf-color-maps {
    $name: map-get($color-map, name);
    $default: map-get($color-map, default);
    $active: map-get($color-map, active);
    $selected: map-get($color-map, selected);

    // Text theme.
    &#{$postfix}.theme-text-#{$name},
    .theme-text-#{$name} &#{$postfix},
    &.theme-text-#{$name}#{$postfix} {
      &:not([disabled]) {
        &:hover, &:focus, &:active {
          color: sf-sensible-text-color($active);
          background-color: rgba($default, 0.05);
        }
        &.active {
          color: sf-sensible-text-color($selected);
          background-color: rgba($default, 0.1);
        }
      }
    }

    // Full theme.
    &#{$postfix}.theme-#{$name},
    .theme-#{$name} &#{$postfix},
    &.theme-#{$name}#{$postfix} {
      &:not([disabled]) {
        &:hover, &:focus, &:active {
          background-color: $active;
          color: sf-contrasting-color($active);
        }
        &.active {
          background-color: $selected;
          color: sf-contrasting-color($selected);
        }
      }
    }
  }
}

/*********************************** Misc ************************************/

@mixin sf-shadow-weak {
  box-shadow: 0 0 0 1px rgba($sf-color-overlay, 0.2);
}

@mixin sf-shadow-thin {
  box-shadow: 0 0 4px -1px $sf-color-overlay;
}

@mixin sf-shadow-medium {
  box-shadow: 0 0.2rem 1.5rem -0.2rem $sf-color-overlay;
}

@mixin sf-shadow-down {
  box-shadow: 0 3px 6px -3px $sf-color-overlay;
}

@mixin sf-shadow-inset-top-bottom {
  $color: $sf-color-overlay;
  box-shadow: inset 0 -9px 9px -9px $color, inset 0 9px 9px -9px $color;
}

@mixin sf-border-weak($color: $sf-color-text) {
  border: 1px solid rgba($color, 0.2);
}

@mixin sf-transitions($properties...) {
  transition-property: $properties;
  transition-duration: $sf-transition-duration;
  transition-timing-function: $sf-transition-timing-function;
}

// Shortcut to a fixed-position overlay covering the whole screen.
@mixin sf-fixed-overlay {
  position: fixed;
  @include sf-trbl(0, 0, 0, 0);
}

@mixin sf-space-out-vertical($space: $sf-space) {
  > *:not(:last-child) {margin-bottom: $space}
}

@mixin sf-space-out-horizontal($space: $sf-space) {
  > *:not(:last-child) {margin-right: $space}
}

// Shortcut to defining an element as a flex layout host and centering its
// children both horizontally and vertically.
@mixin sf-flex-host-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Base outline style. Basis for some other mixins.
@mixin sf-outline-base {
  outline-offset: 0;
  outline-width: 1px;
  outline-style: solid;
  outline-color: transparent;
}

// Used for default :focus and :active effects.
@mixin sf-focus-indicator($extra-shadow: '') {
  &[class*=theme-], [class*=theme-] & {
    @if $extra-shadow == '' {
      box-shadow: $sf-focus-indicator-inverse;
    }
    @if $extra-shadow != '' {
      box-shadow: unquote('#{$sf-focus-indicator-inverse}, #{$extra-shadow}');
    }
  }
  &, &[class*=theme-text-], [class*=theme-text-] & {
    @if $extra-shadow == '' {
      box-shadow: $sf-focus-indicator;
    }
    @if $extra-shadow != '' {
      box-shadow: unquote('#{$sf-focus-indicator}, #{$extra-shadow}');
    }
  }
}

@mixin sf-shadow($shadow, $indicate-focus: false) {
  box-shadow: $shadow;
  @if $indicate-focus and $shadow == none {
    &:focus {
      @include sf-focus-indicator;
    }
  }
  @if $indicate-focus and $shadow != none {
    &:focus {
      @include sf-focus-indicator($shadow);
    }
  }
  @if not $indicate-focus {
    &:focus {
      box-shadow: $shadow;
    }
  }
}

@mixin sf-link-decorations {
  border-bottom: 1px dotted;
  border-color: inherit;
  color: $sf-color-link;
}

@mixin sf-trbl($top, $right, $bottom, $left) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin sf-scroll-v {
  overflow-x: hidden;
  overflow-y: auto;
}
