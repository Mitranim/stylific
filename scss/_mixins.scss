/*********************************** Media ***********************************/

@mixin sf-eq-sm {
  @media (max-width: $sf-layout-breakpoint-sm - 1) {
    @content;
  }
}

@mixin sf-gt-sm {
  @media (min-width: $sf-layout-breakpoint-sm) {
    @content;
  }
}

@mixin sf-eq-md {
  @media (min-width: $sf-layout-breakpoint-sm) and (max-width: $sf-layout-breakpoint-md - 1) {
    @content;
  }
}

@mixin sf-gt-md {
  @media (min-width: $sf-layout-breakpoint-md) {
    @content;
  }
}

@mixin sf-eq-lg {
  @media (min-width: $sf-layout-breakpoint-md) and (max-width: $sf-layout-breakpoint-lg - 1) {
    @content;
  }
}

@mixin sf-gt-lg {
  @media (min-width: $sf-layout-breakpoint-lg) {
    @content;
  }
}

/********************************** Colors ***********************************/

/**
 * See notes in colors.scss.
 */

@mixin sf-register-selected-state {
  // Added :not([disabled]) to match the specificity of the base interactive
  // selectors.
  &:not([disabled]) {
    // Grayscale theme.
    background-color: rgba($sf-color-text, 0.1);

    // Colour themes.
    @each $color-map in $sf-color-maps {
      $name: map-get($color-map, name);
      $selected: map-get($color-map, selected);

      // Text theme.
      &[theme=text-#{$name}], [theme=text-#{$name}] & {
        // These selectors are required to match the states and specificity of
        // the base interactive selectors.
        color: sf-sensible-text-color($selected);
        svg {fill: $selected}
      }

      // Full theme.
      &[theme=#{$name}], [theme=#{$name}] & {
        // These selectors are required to match the states and specificity of
        // the base interactive selectors.
        background-color: $selected;
        color: sf-contrasting-color($selected);
        svg {fill: sf-contrasting-color($selected)}
      }
    }
  }
}

@mixin sf-register-interactive-selector {
  // Grayscale theme.
  &:hover, &:focus, &:active {
    background-color: rgba($sf-color-text, 0.05);
  }
  &.active {
    background-color: rgba($sf-color-text, 0.1);
  }

  // Colour themes.
  @each $color-map in $sf-color-maps {
    $name: map-get($color-map, name);
    $active: map-get($color-map, active);
    $selected: map-get($color-map, selected);

    // Text theme.
    &[theme=text-#{$name}], [theme=text-#{$name}] & {
      &:hover, &:focus, &:active {
        color: sf-sensible-text-color($active);
      }
      &.active {
        color: sf-sensible-text-color($selected);
      }
    }

    // Full theme.
    &[theme=#{$name}], [theme=#{$name}] & {
      &:hover, &:focus, &:active {
        background-color: $active;
        color: sf-contrasting-color($active);
      }
      &.active {
        background-color: $selected;
        color: sf-contrasting-color($selected);
      }
    }
  }

  // Misc.
  @include sf-outline-interactive;
  &[disabled] {opacity: 0.7}
}

/*********************************** Misc ************************************/

@mixin sf-shadow-weak {
  box-shadow: 0 0 0 1px rgba($sf-color-text, 0.2);
}

@mixin sf-shadow-thin {
  box-shadow: 0 0 4px -1px rgba($sf-color-text, 0.5);
}

@mixin sf-shadow-medium {
  box-shadow: 0 0.2rem 1.5rem -0.2rem rgba($sf-color-text, 0.5);
}

@mixin sf-shadow-down {
  box-shadow: 0 3px 6px -3px rgba($sf-color-text, 0.4);
}

@mixin sf-shadow-inset-top-bottom {
  $color: rgba($sf-color-text, 0.4);
  box-shadow: inset 0 -9px 9px -9px $color, inset 0 9px 9px -9px $color;
}

@mixin sf-border-weak($color: $sf-color-text) {
  border: 1px solid rgba($color, 0.2);
}

@mixin sf-transitions($properties...) {
  transition-property: $properties;
  transition-duration: $sf-transition-duration;
  transition-timing-function: $sf-transition-timing-function;
}

// Shortcut to a fixed-position overlay covering the whole screen.
@mixin sf-fixed-overlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@mixin sf-space-out-vertical($space: $sf-space) {
  > *:not(:last-child) {margin-bottom: $space}
}

@mixin sf-space-out-horizontal($space: $sf-space) {
  > *:not(:last-child) {margin-right: $space}
}

// Shortcut to defining an element as a flex layout host and centering its
// children both horizontally and vertically.
@mixin sf-flex-host-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Base outline style. Basis for some other mixins.
@mixin sf-outline-base {
  outline-offset: 0;
  outline-width: 1px;
  outline-style: solid;
  outline-color: transparent;
}

@mixin sf-outline-focus {
  @include sf-outline-base;
  &[theme], [theme] & {
    outline-color: rgba($sf-color-background, 0.5);
  }
  &, &[theme^=text-], [theme^=text] & {
    outline-color: rgba(map-get($sf-color-map-primary, default), 0.5);
  }
}

@mixin sf-outline-interactive {
  @include sf-outline-base;
  &:focus, &:active {@include sf-outline-focus;}
}

@mixin sf-cursor-interactive {
  cursor: pointer;
  &[disabled] {cursor: not-allowed}
}

@mixin sf-link-decorations {
  border-bottom: 1px dotted;
  border-color: inherit;
  color: map-get($sf-color-map-primary, default);
  &:visited {
    color: map-get($sf-color-map-primary, selected);
  }
}
