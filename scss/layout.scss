/********************************** Global ***********************************/

// Required for using % dimensions on children.
html {
  width: 100%;
  height: 100%;
}

// Normalise whitespace.
*, *::before, *::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  /**
   * Layout.
   */
  // Limit the body width and center it horizontally.
  max-width: $sf-body-max-width;
  margin-left: auto;
  margin-right: auto;
  // Stretch vertically to fill the viewport.
  min-height: 100%;

  /**
   * Inner layout.
   */
  // Setting the body up as a flex container allows us to push the footer
  // to the bottom of the screen with an automatic margin.
  display: flex;
  flex-direction: column;
  // These vital properties are implicit, but we duplicate them to avoid
  // accidental overrides by the user.
  align-items: stretch;
  justify-content: flex-start;
}

/********************************** Layout ***********************************/

/**
 * Credit:
 * https://raw.githubusercontent.com/angular/material/v0.10.0/src/core/style/layout.scss
 */

/**
 * Container.
 */

@mixin sf-layout-for-name($postfix: '') {
  $name: if($postfix == '', layout, layout-#{$postfix});

  .#{$name}-row {
    display: flex;
    flex-direction: row;
  }
  .#{$name}-column {
    display: flex;
    flex-direction: column;
  }

  // Whitespace on main axis.
  .#{$name}-center        {justify-content: center}
  .#{$name}-end           {justify-content: flex-end}
  .#{$name}-start         {justify-content: flex-start}
  .#{$name}-space-around  {justify-content: space-around}
  .#{$name}-space-between {justify-content: space-between}

  // Individual items on cross axis.
  .#{$name}-cross-center  {align-items: center}
  .#{$name}-cross-end     {align-items: flex-end}
  .#{$name}-cross-start   {align-items: flex-start}
  .#{$name}-cross-stretch {align-items: stretch}

  // Whitespace.
  .#{$name}-row.space-out {
    @include sf-space-out-horizontal;
  }
}

@include sf-layout-for-name();
@include sf-eq-sm {@include sf-layout-for-name(sm);}
@include sf-gt-sm {@include sf-layout-for-name(md);}
@include sf-gt-md {@include sf-layout-for-name(lg);}

/**
 * Children.
 */

@mixin sf-child-layout-for-name($postfix: '') {
  $name: if($postfix == '', flex, flex-#{$postfix});

  // Cross axis alignment.
  .#{$name}-center  {align-self: center}
  .#{$name}-end     {align-self: flex-end}
  .#{$name}-start   {align-self: flex-start}
  .#{$name}-stretch {align-self: stretch}

  // Misc.
  .#{$name}-none {flex: none}

  // .flex-N {flex: N} where 1 <= N <= 12
  $i: 1;
  @while $i <= 12 {
    .#{$name}-#{$i} {flex: $i}
    $i: $i + 1;
  }

  // .flex-order-N {order: N} where -1 <= N <= 3
  $i: -1;
  @while $i <= 3 {
    .#{$name}-order-#{$i} {order: $i}
    $i: $i + 1;
  }
}

@include sf-child-layout-for-name();
@include sf-eq-sm {@include sf-child-layout-for-name(sm);}
@include sf-gt-sm {@include sf-child-layout-for-name(md);}
@include sf-gt-md {@include sf-child-layout-for-name(lg);}

/*********************************** Grid ************************************/

@mixin sf-grid-base-style {
  display: flex;
  flex-wrap: wrap;

  // Prevent children from unexpectedly stretching or shrinking.
  > * {
    flex-grow: 0;
    flex-shrink: 0;
  }
}

/**
 * Default wrap configuration.
 */

.grid > * {
  // Equivalent to a combination of:
  //   .grid-sm="2"
  //   .grid-md="4"
  //   .grid-lg="6"
  @include sf-eq-sm {flex-basis: 50%}
  @include sf-gt-sm {flex-basis: 25%}
  @include sf-gt-md {flex-basis: calc(1/6 * 100%)}
}
.grid-sm > * {
  @include sf-eq-sm {flex-basis: 50%}
}
.grid-md > * {
  @include sf-gt-sm {flex-basis: 25%}
}
.grid-lg > * {
  @include sf-gt-md {flex-basis: calc(1/6 * 100%)}
}

.grid, .grid-sm, .grid-md, .grid-lg {
  @include sf-grid-base-style;
}

@mixin sf-grid-for-name($postfix: '') {
  $name: if($postfix == '', grid, grid-#{$postfix});

  .#{$name}-1, .#{$name}-2, .#{$name}-3, .#{$name}-4, .#{$name}-5, .#{$name}-6 {
    @include sf-grid-base-style;
  }

  .#{$name}-1 > * {flex-basis: 100%}
  .#{$name}-2 > * {flex-basis: 50%}
  .#{$name}-3 > * {flex-basis: calc(1/3 * 100%)}
  .#{$name}-4 > * {flex-basis: 25%}
  .#{$name}-5 > * {flex-basis: 20%}
  .#{$name}-6 > * {flex-basis: calc(1/6 * 100%)}
}

@include sf-grid-for-name();
@include sf-eq-sm {@include sf-grid-for-name(sm);}
@include sf-gt-sm {@include sf-grid-for-name(md);}
@include sf-gt-md {@include sf-grid-for-name(lg);}
