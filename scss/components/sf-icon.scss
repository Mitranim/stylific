/**
 * sf-icon is a container for icons with background images, such as data-encoded
 * SVG. To use it, add a background-image property through CSS, an inline style
 * attribute, or an inner `<svg>` tag.
 *
 * Example usage.
 *
 * In your stylesheet:
 *
 *   .sf-icon-skype {
 *     backgroundâ€“image: url{path-to-skype-icon.svg};
 *   }
 *
 * In your HTML:
 *
 *   <span class="sf-icon-skype"></span>
 *
 * sf-icon is sized as 1em by default, which means it'll be the same size as
 * surrounding text. To scale it separately, use a bigger font-size:
 *
 *   <span class="sf-icon" style="font-size: 1.2em"></span>
 */

[class*=sf-icon] {

  /**
   * Layout.
   */
  display: inline-block;
  // Expect a square icon. Size in 1em to scale with the surrounding font.
  width: 1em;
  height: 1em;

  /**
   * Background styling.
   */
  // Match the default container size. We purposely don't use
  // {background-size: contain}, because there's a scenario when the container
  // becomes stretched. We want the icon to always have the default size and
  // scale along with the font size.
  background-size: 1em;
  // Center the icon both horizontally and vertically.
  background-position: 50% 50%;
  // Make sure it doesn't repeat.
  background-repeat: no-repeat;

  // Inline version for use in text.
  &.inline {
    // Slightly lower to match the vertical position of letters without
    // descenders.
    vertical-align: -0.1em;
    &:not(:first-child) {
      margin-left: 0.3em;
    }
    &:not(:last-child) {
      margin-right: 0.3em;
    }
  }

  // Nested SVG styles.
  > svg {
    // Center horizontally.
    display: inline-block;
    margin-left: auto;
    margin-right: auto;
    // Dimensions.
    width: 1em !important;
    height: 1em !important;
  }

  /**
   * Version that loses its hue and lightens or darkens until hovered or
   * otherwise activated.
   */
  &.dark {
    &:not(:hover):not(:focus):not(:active):not(.active) {
      filter: unquote('grayscale(1) brightness(0.2)');
    }
  }

  /**
   * Version that loses its hue and lightens until hovered or otherwise
   * activated.
   */
  &.light {
    &:not(:hover):not(:focus):not(:active):not(.active) {
      filter: unquote('grayscale(1) brightness(2)');
    }
  }

  /**
   * Version that pops on activation.
   */
  &.pop {
    &:hover, &:focus, &:active, &.active {
      transform: scale(1.5);
      &:not([class*=theme-]), &[class*=theme-text-] {
        background-color: transparent;
      }
    }
  }

  // Animate all transitions.
  @include sf-transitions(all);
}
