/**
 *
 * # Usage
 *
 * A tooltip is invoked with an attribute, like so:
 *
 *   <p sf-tooltip="tooltip text">hover me</p>
 *
 *
 * ## Position
 *
 * By default, it's positioned above the host element. It can be moved to the
 * bottom with another attribute:
 *
 *   <p sf-tooltip="tooltip text" sf-position="bottom">hover me</p>
 *
 * The following positions are supported: top, top-right, right-top, left-top,
 * bottom, bottom-right.
 *
 *
 * ## Trigger
 *
 * By default, the tooltip is triggered with :hover. You can specify other
 * triggers with another attribute:
 *
 *   <p sf-tooltip="tooltip text" contenteditable
 *      sf-trigger="hover focus">hover or focus me</p>
 *
 * The following triggers are supported: :active, :disabled, :focus, :hover,
 * :target. You can also add the attribute sf-tooltip-show to make the tooltip
 * unconditionally visible.
 *
 *
 * # Limitations
 *
 * This implementation uses the ::after pseudoelement. This doesn't require any
 * additional markup for most elements, but doesn't work with
 * <input type="text"> and <textarea> since they can't have children. For the
 * :hover and :active versions, you can work around this by wrapping the input
 * into a parent element and applying the tooltip attributes to the parent.
 * These states naturally propagate from the input to the parent, and the
 * tooltip will be visible. However, this won't work for :focus, :disabled,
 * and, most likely, :target, since these states don't propagate to parents.
 *
 * Example of using a tooltip with an input:
 *
 *   <p sf-tooltip="tooltip text">
 *     <input>
 *   </p>
 *
 * It also sets {position: relative} on the host.
 */

/**
 * ToDo.
 *
 * Add triangles.
 *
 * Look for ways to implement tooltips that work with <input type="text"> and
 * <textarea> without involving parents (siblings and attributes only).
 */

[#{$sf-prefix}-tooltip] {

  $attr: '#{$sf-prefix}-tooltip';

  /**
   * Layout.
   */
  position: relative;

  // Workaround for a bug in the clean-css minifier used for the documentation.
  // Adding :not([#{$attr}='']) to the main selector (the one we apply the
  // component mixin to) causes the minifier to add an extra space before
  // attribute selectors for position and trigger. Moving it here as an extra
  // rule patches the problem.
  &[#{$attr}='']::after {content: none}

  &::after {
    content: attr(unquote($attr));

    /**
     * Layout.
     */
    position: absolute;
    z-index: $sf-z-index-tooltip;

    // Hidden unless the host is activated. Both opacity and visibility are
    // required for animating the transition.
    opacity: 0;
    visibility: hidden;
    // Animate the transitions.
    @include sf-transitions(all);

    // Use a fraction of the host's font size.
    font-size: percentage($sf-tooltip-proportion);
    // Use a fraction of the standard padding. We scale it down twice as much as
    // other dimensions.
    padding: $sf-space * $sf-tooltip-proportion / 2;

    // Use grayscale negatives of the base text and background colours. If the
    // user adjusts the defaults, the tooltips adjust to the new theme
    // automatically.
    background-color: sf-contrasting-color($sf-color-background);
    color: sf-contrasting-color($sf-color-text);

    // Use a fraction of the standard border radius.
    border-radius: $sf-border-radius * $sf-tooltip-proportion;
  }

  /**
   * Tooltip positioning.
   */
  // Position attribute name.
  $attr-position: '#{$sf-prefix}-position';
  // Calculated offset.
  $offset: unquote('calc(100% + #{$sf-tooltip-offset})');
  // Top (default).
  &:not([#{$attr-position}])::after,
  &[#{$attr-position}=top]::after {
    bottom: $offset;
    left: 0;
  }
  // Top-right.
  &[#{$attr-position}=top-right]::after {
    bottom: $offset;
    right: 0;
  }
  // Right-top.
  &[#{$attr-position}=right-top]::after {
    top: 0;
    left: $offset;
  }
  // Left-top.
  &[#{$attr-position}=left-top]::after {
    top: 0;
    right: $offset;
  }
  // Bottom.
  &[#{$attr-position}=bottom]::after {
    top: $offset;
    left: 0;
  }
  // Bottom-right.
  &[#{$attr-position}=bottom-right]::after {
    top: $offset;
    right: 0;
  }

  /**
   * Triggered state styles. In the absence of a trigger attribute, the
   * tooltip is triggered by hovering the host. Trigger indicators may be
   * combined like so:
   *
   *   <button sf-tooltip="tooltip text"
   *           sf-trigger="hover focus">hover or focus me</button>
   */
  &:not([#{$sf-prefix}-trigger]):hover,
  &[#{$sf-prefix}-trigger~=active]:active,
  &[#{$sf-prefix}-trigger~=disabled]:disabled,
  &[#{$sf-prefix}-trigger~=focus]:focus,
  &[#{$sf-prefix}-trigger~=hover]:hover,
  &[#{$sf-prefix}-trigger~=target]:target,
  // Unconditional visibility; hook for JavaScript enhancement.
  &[#{$sf-prefix}-tooltip-show] {
    &::after {
      opacity: inherit;
      visibility: inherit;
    }
  }
}
