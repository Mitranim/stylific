/**
 * Navigation bar. Has static and fixed versions, and can auto-collapse into
 * a dropdown when the screen is narrow.
 *
 *   <body>
 *     <sf-navbar>
 *       <a href=...>...</a>
 *       ...
 *     </sf-navbar>
 *     ...
 *   </body>
 *
 * See http://mitranim.com/stylific/components/#sf-navbar
 */

sf-navbar,
[sf-navbar] {

  /**
   * Layout.
   */
  // Take up all available width.
  width: 100%;
  // Set a fixed height, so we can offset the next element accordingly when the
  // navbar is fixed. This is also required for percentage-based rules on
  // children.
  min-height: $sf-navbar-height;
  // Changing position to relative positions the navbar shadow above any static
  // siblings following the navbar.
  position: relative;
  // Fixed version.
  &[sf-navbar~=fixed] {
    /**
     * Layout.
     */
    position: fixed;
    top: 0;
    // Set a proper z-index.
    z-index: $sf-z-index-navbar;
    // Use the body's maximum width and center horizontally.
    max-width: $sf-body-max-width;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;

    // Offset the next element by the same margin. The next element must be in
    // the document flow (i.e. not fixed or absolute or float).
    & + * {
      margin-top: $sf-navbar-height;
    }
  }

  /**
   * Inner layout.
   */
  display: flex;
  flex-wrap: wrap;

  // Typography.
  font-size: 1.2em;
  text-align: center;

  // Cosmetic.
  background-color: $sf-color-background;
  box-shadow: 0 3px 6px -3px rgba($sf-color-text, 0.4);

  // Immediate child styles.
  > * {
    /**
     * Layout.
     */
    // Stretch across the container.
    flex: 1;
    // This is required for stretching vertically if min-height is set on the
    // parent.
    min-height: inherit;

    /**
     * Inner layout.
     */
    @include sf-flex-host-center;

    // Add some minimum whitespace.
    padding: $sf-space / 2;
  }

  /*------------------------------ Collapsing -------------------------------*/

  /**
   * These styles define the auto-collapsing feature. It allows the navbar to
   * automatically collapse past a certain nth child, turning the remaining
   * elements into a dropdown toggled with a button. Collapsing only happens
   * before a certain media breakpoint controlled by a variable. By default,
   * it matches the breakpoint used for other responsive layouts.
   *
   * To enable collapsing, the user needs to include a <label> before the
   * collapsable childre. The structure must be as follows:
   *
   *   <sf-navbar>
   *     ... [non-collapsing elements]
   *     <label> ... [optional content] </label>
   *     ... [auto-collapsing elements]
   *   </sf-navbar>
   *
   * Where non-collapsing and collapsing elements are divided with the
   * `$sf-navbar-nth-child` variable, which specifies at which ordinal position
   * the children should be wrapped.
   *
   * The [id] and [for] attributes must match. The input is hidden and is used
   * for tracking and controlling the toggled state. The label is clickable and
   * controls the input. It's hidden when the navbar is not collapsed.
   */

  /**
   * Base label styles.
   */
  > label {
    /**
     * Layout.
     */
    // Stay inflexible, stretch only to accommodate the content.
    flex: none;
    // Reserve some space even when used without content.
    min-width: 10%;
    // Hidden by default.
    display: none;
    // Reposition after the pre-breakpoint navbar children.
    order: 1;

    // Cosmetic.
    @include sf-register-interactive-selector;
    @include sf-cursor-interactive;

    // Overlay for closing the toggled dropdown.
    &::before {
      @include sf-fixed-overlay;
      opacity: 0;
    }

    // Indicators.
    &::after {
      content: '▽';
      display: inline-block;
      vertical-align: middle;
    }
    // If there's some text inside, offset the indicator.
    &:not(:empty)::after {
      padding-left: 0.5em;
    }
  }

  /**
   * Active label styles.
   */
  > label.active {
    // Make the toggle overlay interactive.
    &::before {content: ''}
    // Modify the indicator symbol.
    &::after {content: '▲'}
  }

  /**
   * Styles for post-label children that only apply before the media breakpoint.
   */
  @mixin collapse-rules {
    /**
     * Base styles.
     */
    // Display the toggle label.
    > label {display: inherit}
    // Base styling for collapsable children.
    > label ~ * {
      /**
       * Layout.
       */
      // Try to take up the entire line. With {flex-wrap: wrap} enabled on the
      // parent, this wraps every child to its own line.
      flex: 100%;
      // Put after the collapse toggle.
      order: 2;

      // Whitespace.
      padding: $sf-space;

      // Animate visibility changes. Don't animate padding or min/max height
      // because it's costly. Include other common transitions.
      @include sf-transitions(transform, color, background-color, outline, shadow, border);
    }

    // Styles for collapsed children.
    > label:not(.active) ~ * {
      min-height: 0;
      max-height: 0;
      padding-top: 0;
      padding-bottom: 0;
      transform: scaleY(0);
    }

    /**
     * Active styles.
     */
    > label.active ~ * {
      // Make visible.
      transform: scaleY(1);
    }
  }
  @media (max-width: $sf-layout-breakpoint-sm) {@include collapse-rules;}
  // Version that always folds.
  &[sf-navbar~=fold] {@include collapse-rules;}

  /**
   * "navtabs" version.
   */
  &[sf-navbar~=tabs] {
    box-shadow: none;
    @include sf-border-weak;
    &:not([sf-navbar~=fixed]) {z-index: auto}
  }
}
