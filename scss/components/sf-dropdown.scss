/**
 *
 * # Modes
 *
 * .sf-dropdown has two mutually exclusive modes: hover and toggled. The
 * toggled version is enabled by [data-sf-toggle] to the <label>.
 *
 *
 * ## Hover
 *
 * The hover version must have the following layout:
 *
 *   <div class="sf-dropdown">
 *     <label>...</label>
 *     <div class="sf-dropdown-list">
 *       ...
 *     </div>
 *   </div>
 *
 * It triggers when you hover over the label and stays while the label or
 * the .sf-dropdown-list is hovered. The label needs to contain some text or
 * other content to be visible. The following .sf-dropdown-list may contain
 * arbitrary elements.
 *
 *
 * ## Toggled
 *
 * The toggled version is enabled by adding the [data-sf-toggle] attribute to the
 * label.
 *
 *   <div class="sf-dropdown">
 *     <label data-sf-toggle>...</label>
 *     <div class="sf-dropdown-list">
 *       ...
 *     </div>
 *   </div>
 *
 * This version is toggled on and off by clicking the label, and is toggled off
 * when clicking outside of the dropdown.
 *
 *
 * # Position
 *
 * The default position of the dropdown list is below the label. It can be
 * altered with an additional option.
 *
 *   <div class="sf-dropdown sf-dropdown-top">
 *   <div class="sf-dropdown sf-dropdown-right">
 *
 * See the code below for the list of supported positions.
 */

/**
 * ToDo.
 *
 * Use different xy shadow offsets based on position.
 */

.sf-dropdown {

  /**
   * Layout.
   */
  // Position relatively to provide a reference point for the dropdown list.
  position: relative;
  // This fixes the problem of children being overlayed by elements with a lower
  // z-index. The :hover state propagates from the children to the host.
  &:hover {
    z-index: $sf-z-index-dropdown;
  }

  // Base background colour for the list.
  &:not([class*=theme]), &[class*=theme-text-] {
    background-color: $sf-color-background;
  }
  [class*=theme] & {
    background-color: inherit;
  }

  /**
   * Base label styles.
   */
  > label {
    /**
     * Layout.
     */
    // Stretch across the available space.
    flex: 1;
    align-self: stretch;

    /**
     * Inner layout.
     */
    // Center the content vertically.
    display: flex;
    align-items: center;

    /**
     * Cosmetic.
     */
    &:not([disabled]) {cursor: pointer}
    // Cosmetic state indicator. In the hover version, it's static; in the
    // toggled version, its content is changed when the state is toggled.
    &::after {
      // Layout.
      content: '▽';
      display: inline-block;
      vertical-align: -0.1em;

      // Cosmetic.
      opacity: 0.5;
      font-size: 50%;
      // Prevent the indicator from touching the sides.
      padding-left: 0.5em;
      padding-right: 0.5em;
    }
  }

  /**
   * Base label styles for the toggled version.
   */
  > label[data-sf-toggle] {
    /**
     * Overlay for closing the toggled dropdown.
     */
    &::before {
      @include sf-fixed-overlay;
      opacity: 0;
      cursor: default;
      // Layer this just under the dropdown.
      z-index: $sf-z-index-dropdown - 1;
    }
  }

  /**
   * Active label styles for the toggled version.
   */
  > label[data-sf-toggle].active {
    // Make the toggle overlay interactive.
    &::before {content: ''}
    // Change the state indicator.
    &::after {content: '▲'}
  }

  /**
   * Base dropdown list styles.
   */
  @at-root .sf-dropdown-list {
    /**
     * Layout.
     */
    // Positioned absolutely in respect to the parent dropdown host.
    position: absolute;
    z-index: $sf-z-index-dropdown;
    width: 100%;

    // Hidden unless active. Both opacity and visibility are required to animate
    // the visibility change.
    opacity: 0;
    visibility: hidden;

    // Animate visibility changes.
    @include sf-transitions(all);

    /**
     * Inner layout.
     */
    display: flex;
    flex-direction: column;

    /**
     * Cosmetic.
     */
    @include sf-shadow-medium;
    background-color: inherit;

    // Cosmetic styling for immediate children.
    > * {padding: $sf-space}
  }

  /**
   * Position-dependent indicators.
   */
  // Top.
  &.sf-dropdown-top {
    // Reverse the indicators.
    > label::after {content: '△'}
    > label[data-sf-toggle].active::after {
      content: '▼';
    }
  }

  /**
   * Active dropdown list styles.
   */
  // Hover version.
  > label:not([data-sf-toggle]):hover + .sf-dropdown-list,
  // Hover version -> dropdown list; we try to limit this to the hover version
  // to avoid flickering in the dropdown version when animations are enabled.
  > label:not([data-sf-toggle]) + .sf-dropdown-list:hover,
  // Toggled version.
  > label[data-sf-toggle].active + .sf-dropdown-list {
    // Display. Both opacity and visibility are required to animate the
    // visibility change.
    opacity: inherit;
    visibility: inherit;
  }

  /**
   * Dropdown list positioning.
   */
  // Bottom (default).
  &:not([class*=sf-dropdown-]), &.sf-dropdown-bottom {
    > .sf-dropdown-list {
      top: 100%;
      left: 0;
    }
  }
  // Top.
  &.sf-dropdown-top {
    // Dropdown position.
    > .sf-dropdown-list {
      bottom: 100%;
      left: 0;
    }
  }
  // Right.
  &.sf-dropdown-right {
    > .sf-dropdown-list {
      top: 0;
      left: 100%;
    }
  }
  // Left.
  &.sf-dropdown-left {
    > .sf-dropdown-list {
      top: 0;
      right: 100%;
    }
  }
}
