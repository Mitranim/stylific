/**
 * Button styling. Somewhat inspired by material design.
 *
 * Usage:
 *
 *   <button>...</button>
 *   <input type="button">
 *   <sf-button>...</sf-button>
 *   <div sf-button>...</div>
 */

/**
 * TODO.
 *
 * Review how to best implement a button whose dimensions stay unchanged when
 * the content is changed dynamically. Easier in a flexible container, more
 * difficult when surrounded by whitespace. Might make an option with some
 * minimum width, a set height, and text ellipsis on overflow.
 */

#{$sf-prefix}-button,
[#{$sf-prefix}-button],
// Override native styles too.
button, input[type=button] {

  /**
   * Layout.
   */
  display: inline-block;
  padding: $sf-space / 2;

  // Normalise font size (browser defaults may be unpredictable).
  font-size: inherit;

  // Use the base background colour by default.
  background-color: inherit;

  // Border styles.
  border: none;
  border-radius: $sf-border-radius;
  outline: none;
  &:focus {outline: none}

  box-shadow: 0 0.1rem 0.3rem -1px rgba(5, 5, 5, 0.5);
  &:active {
    @include sf-shadow-thin;
  }
  &[#{$sf-prefix}-button~=flat], &[disabled] {box-shadow: none}

  // Animate style changes.
  @include sf-transitions(all);
}
